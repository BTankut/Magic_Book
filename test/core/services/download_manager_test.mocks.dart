// Mocks generated by Mockito 5.4.4 from annotations
// in magic_book/test/core/services/download_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:magic_book/core/services/logging_service.dart' as _i3;
import 'package:magic_book/core/services/network_service.dart' as _i7;
import 'package:magic_book/core/services/storage_service.dart' as _i4;
import 'package:magic_book/shared/models/tale.dart' as _i6;
import 'package:magic_book/shared/models/user_profile.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamController_0<T> extends _i1.SmartFake
    implements _i2.StreamController<T> {
  _FakeStreamController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoggingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingService extends _i1.Mock implements _i3.LoggingService {
  @override
  void v(
    String? message, {
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void d(
    String? message, {
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void i(
    String? message, {
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void w(
    String? message, {
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void e(
    String? message, {
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void wtf(
    String? message, {
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #wtf,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void log(
    _i3.LogLevel? level,
    String? message, {
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [
            level,
            message,
          ],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i4.StorageService {
  @override
  _i2.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  List<_i5.UserProfile> getAllUserProfiles() => (super.noSuchMethod(
        Invocation.method(
          #getAllUserProfiles,
          [],
        ),
        returnValue: <_i5.UserProfile>[],
        returnValueForMissingStub: <_i5.UserProfile>[],
      ) as List<_i5.UserProfile>);

  @override
  _i5.UserProfile? getUserProfile(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as _i5.UserProfile?);

  @override
  _i2.Future<void> saveUserProfile(_i5.UserProfile? profile) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveUserProfile,
          [profile],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> deleteUserProfile(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteUserProfile,
          [id],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  List<_i6.Tale> getAllFavoriteTales() => (super.noSuchMethod(
        Invocation.method(
          #getAllFavoriteTales,
          [],
        ),
        returnValue: <_i6.Tale>[],
        returnValueForMissingStub: <_i6.Tale>[],
      ) as List<_i6.Tale>);

  @override
  List<_i6.Tale> getFavoriteTales() => (super.noSuchMethod(
        Invocation.method(
          #getFavoriteTales,
          [],
        ),
        returnValue: <_i6.Tale>[],
        returnValueForMissingStub: <_i6.Tale>[],
      ) as List<_i6.Tale>);

  @override
  _i6.Tale? getTale(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTale,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as _i6.Tale?);

  @override
  _i6.Tale? getFavoriteTale(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getFavoriteTale,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as _i6.Tale?);

  @override
  _i2.Future<bool> saveFavoriteTale(_i6.Tale? tale) => (super.noSuchMethod(
        Invocation.method(
          #saveFavoriteTale,
          [tale],
        ),
        returnValue: _i2.Future<bool>.value(false),
        returnValueForMissingStub: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<void> deleteFavoriteTale(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteFavoriteTale,
          [id],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> updateTale(_i6.Tale? tale) => (super.noSuchMethod(
        Invocation.method(
          #updateTale,
          [tale],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> markTaleAsDownloaded(String? taleId) => (super.noSuchMethod(
        Invocation.method(
          #markTaleAsDownloaded,
          [taleId],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> updateTaleDownloadStatus(
    String? taleId,
    bool? isDownloaded,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTaleDownloadStatus,
          [
            taleId,
            isDownloaded,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  List<_i6.Tale> getOfflineAvailableTales() => (super.noSuchMethod(
        Invocation.method(
          #getOfflineAvailableTales,
          [],
        ),
        returnValue: <_i6.Tale>[],
        returnValueForMissingStub: <_i6.Tale>[],
      ) as List<_i6.Tale>);

  @override
  bool isTaleAvailableOffline(String? taleId) => (super.noSuchMethod(
        Invocation.method(
          #isTaleAvailableOffline,
          [taleId],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.Future<void> saveAppSetting(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAppSetting,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  dynamic getAppSetting(
    String? key, {
    dynamic defaultValue,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #getAppSetting,
          [key],
          {#defaultValue: defaultValue},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Future<void> setActiveUserProfile(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #setActiveUserProfile,
          [userId],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i7.NetworkService {
  @override
  _i2.StreamController<_i7.NetworkStatus> get networkStatusController =>
      (super.noSuchMethod(
        Invocation.getter(#networkStatusController),
        returnValue: _FakeStreamController_0<_i7.NetworkStatus>(
          this,
          Invocation.getter(#networkStatusController),
        ),
        returnValueForMissingStub: _FakeStreamController_0<_i7.NetworkStatus>(
          this,
          Invocation.getter(#networkStatusController),
        ),
      ) as _i2.StreamController<_i7.NetworkStatus>);

  @override
  set networkStatusController(
          _i2.StreamController<_i7.NetworkStatus>? _networkStatusController) =>
      super.noSuchMethod(
        Invocation.setter(
          #networkStatusController,
          _networkStatusController,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Stream<_i7.NetworkStatus> get networkStatusStream => (super.noSuchMethod(
        Invocation.getter(#networkStatusStream),
        returnValue: _i2.Stream<_i7.NetworkStatus>.empty(),
        returnValueForMissingStub: _i2.Stream<_i7.NetworkStatus>.empty(),
      ) as _i2.Stream<_i7.NetworkStatus>);

  @override
  _i7.NetworkStatus get currentStatus => (super.noSuchMethod(
        Invocation.getter(#currentStatus),
        returnValue: _i7.NetworkStatus.online,
        returnValueForMissingStub: _i7.NetworkStatus.online,
      ) as _i7.NetworkStatus);

  @override
  bool get isOnline => (super.noSuchMethod(
        Invocation.getter(#isOnline),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<_i7.NetworkStatus> getCurrentNetworkStatus() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentNetworkStatus,
          [],
        ),
        returnValue:
            _i2.Future<_i7.NetworkStatus>.value(_i7.NetworkStatus.online),
        returnValueForMissingStub:
            _i2.Future<_i7.NetworkStatus>.value(_i7.NetworkStatus.online),
      ) as _i2.Future<_i7.NetworkStatus>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
