// Mocks generated by Mockito 5.4.4 from annotations
// in magic_book/test/features/tale_generation/services/tale_generation_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i7;

import 'package:magic_book/core/services/dalle_api_service.dart' as _i6;
import 'package:magic_book/core/services/gemini_api_service.dart' as _i2;
import 'package:magic_book/core/services/logging_service.dart' as _i8;
import 'package:magic_book/shared/models/user_profile.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GeminiApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeminiApiService extends _i1.Mock implements _i2.GeminiApiService {
  MockGeminiApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> generateText(String? prompt) => (super.noSuchMethod(
        Invocation.method(
          #generateText,
          [prompt],
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #generateText,
            [prompt],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  String extractTextFromResponse(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #extractTextFromResponse,
          [data],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #extractTextFromResponse,
            [data],
          ),
        ),
      ) as String);

  @override
  _i3.Future<String> generateTale({
    required _i5.UserProfile? profile,
    required int? wordCount,
    required String? theme,
    required String? setting,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateTale,
          [],
          {
            #profile: profile,
            #wordCount: wordCount,
            #theme: theme,
            #setting: setting,
          },
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #generateTale,
            [],
            {
              #profile: profile,
              #wordCount: wordCount,
              #theme: theme,
              #setting: setting,
            },
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<String> generateImagePrompt({
    required _i5.UserProfile? profile,
    required String? pageContent,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateImagePrompt,
          [],
          {
            #profile: profile,
            #pageContent: pageContent,
          },
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #generateImagePrompt,
            [],
            {
              #profile: profile,
              #pageContent: pageContent,
            },
          ),
        )),
      ) as _i3.Future<String>);
}

/// A class which mocks [DalleApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDalleApiService extends _i1.Mock implements _i6.DalleApiService {
  MockDalleApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i7.Uint8List> generateImage(
    String? prompt, {
    String? size = r'1024x1024',
    String? quality = r'standard',
    String? style = r'vivid',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateImage,
          [prompt],
          {
            #size: size,
            #quality: quality,
            #style: style,
          },
        ),
        returnValue: _i3.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
      ) as _i3.Future<_i7.Uint8List>);

  @override
  String extractBase64ImageFromResponse(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #extractBase64ImageFromResponse,
          [data],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #extractBase64ImageFromResponse,
            [data],
          ),
        ),
      ) as String);

  @override
  String imageToBase64(_i7.Uint8List? imageBytes) => (super.noSuchMethod(
        Invocation.method(
          #imageToBase64,
          [imageBytes],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #imageToBase64,
            [imageBytes],
          ),
        ),
      ) as String);

  @override
  _i7.Uint8List base64ToImage(String? base64String) => (super.noSuchMethod(
        Invocation.method(
          #base64ToImage,
          [base64String],
        ),
        returnValue: _i7.Uint8List(0),
      ) as _i7.Uint8List);
}

/// A class which mocks [LoggingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingService extends _i1.Mock implements _i8.LoggingService {
  MockLoggingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void v(
    String? message, {
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void d(
    String? message, {
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void i(
    String? message, {
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void w(
    String? message, {
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void e(
    String? message, {
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void wtf(
    String? message, {
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #wtf,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void log(
    _i8.LogLevel? level,
    String? message, {
    dynamic error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [
            level,
            message,
          ],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );
}
